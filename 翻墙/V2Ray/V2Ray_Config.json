{
    //日志配置，表示 V2Ray 如何输出日志。
    "log": {
        "access": "文件地址", //访问日志的文件地址
        "error": "文件地址", //错误日志的文件地址
        "loglevel": "warning"
    },
    //内置的远程控置 API, V2Ray 中可以开放一些 API 以便远程调用。这些 API 都基于 gRPC。
	//在服务器配置时候,如果不需要api,则要去掉,不然会报错
    "api": {},
    //内置的 DNS 服务器，若此项不存在，则默认使用本机的 DNS 设置。
    "dns": {},
    //当此项存在时，开启统计信息。
    "stats": {},
    //V2Ray 内建了一个简单的路由功能，可以将入站数据按需求由不同的出站连接发出，以达到按需代理的目的。这一功能的常见用法是分流国内外流量，V2Ray 可以通过内部机制判断不同地区的流量，然后将它们发送到不同的出站代理。
    "routing": {
        "domainStrategy": "AsIs(default)|IPIfNonMatch|IPOnDemand",
        "rules": [
            {
                "type": "field",
                "domain": [
                    "baidu.com",
                    "qq.com",
                    "geosite:cn"
                ],
                "ip": [
                    "0.0.0.0/8",
                    "10.0.0.0/8",
                    "fc00::/7",
                    "fe80::/10",
                    "geoip:cn"
                ],
                "port": "53,443,1000-2000",
                "network": "tcp|udp|tcp,udp", //当连接方式是指定的方式时，此规则生效。
                "source": [
                    "10.0.0.1"
                ],
                "user": [
                    "love@v2ray.com"
                ],
                "inboundTag": [ //当某一元素匹配入站协议的标识时，此规则生效。
                    "tag-vmess"
                ],
                "protocol": [
                    "http",
                    "tls",
                    "bittorrent"
                ], //一个数组，数组内每一个元素表示一种协议。当某一个协议匹配当前连接的流量时，此规则生效。必须开启入站代理中的sniffing选项。
                "attrs": "attrs[':method'] == 'GET'", // 一段脚本，用于检测流量的属性值。当此脚本返回真值时，此规则生效。
                "outboundTag": "direct", //对应一个额外出站连接配置的标识。
                "balancerTag": "balancer" //对应一个负载均衡器的标识。balancerTag和outboundTag须二选一。当同时指定时，outboundTag生效。
            }
        ],
        "balancers": [
            {
                "tag": "balancer",
                "selector": []
            }
        ]
    },
    //本地策略可进行一些权限相关的配置,本地策略可以配置一些用户相关的权限，比如连接超时设置。V2Ray 处理的每一个连接，都对应到一个用户，按照这个用户的等级（level）应用不同的策略。本地策略可按照等级的不同而变化。
    "policy": {
        "levels": {
            "0": {
                "handshake": 4,
                "connIdle": 300,
                "uplinkOnly": 2,
                "downlinkOnly": 5,
                "statsUserUplink": false,
                "statsUserDownlink": false,
                "bufferSize": 10240
            }
        },
        "system": {
            "statsInboundUplink": false,
            "statsInboundDownlink": false
        }
    },
    //反向代理,可以把服务器端的流量向客户端转发，即逆向流量转发。
    "reverse": {
        "bridges": [
            {
                "tag": "bridge",
                "domain": "test.v2ray.com"
            }
        ],
        "portals": [
            {
                "tag": "portal",
                "domain": "test.v2ray.com"
            }
        ]
    },
    "inbounds": [ //一个数组，每个元素是一个入站连接配置。
        {
            "port": 1080,
            "listen": "127.0.0.1",
            "protocol": "socks",
            "settings": { //具体的配置内容，视协议不同而不同。详见每个协议中的InboundConfigurationObject。
                "auth": "noauth" 
            },
            "streamSettings": { //底层传输方式（transport）是当前 V2Ray 节点和其它节点对接的方式。底层传输方式提供了稳定的数据传输通道。底层传输（transport）配置分为两部分，一是全局设置(TransportObject)，二是分协议配置(StreamSettingsObject)。
                "network": "tcp(default)|kcp|ws|http|domainsocket|quic",//数据流所使用的网络类型，默认值为 "tcp"
                "security": "none(default)|tls",//是否启入传输层加密，支持的选项有 "none" 表示不加密（默认值），"tls" 表示使用 TLS。
                "tlsSettings": {},
                "tcpSettings": {},
                "kcpSettings": {},
                "wsSettings": {},
                "httpSettings": {},
                "dsSettings": {},
                "quicSettings": {},
                "sockopt": { //连接选项
                    "mark": 0,
                    "tcpFastOpen": false,
                    "tproxy": "off"
                }
            },
            "tag": "标识", //此入站连接的标识，用于在其它的配置中定位此连接。当其不为空时，其值必须在所有tag中唯一。
            "sniffing": { //尝试探测流量的类型,简单说这东西就是从网络流量中识别出域名。这个 sniffing 有两个用处：1、解决 DNS 污染 2、于 IP 流量可以应用后文提到的域名路由规则 3、识别 BT 协议，根据自己的需要拦截或者直连 BT 流量
                "enabled": true,
                "destOverride": [
                    "http",
                    "tls"
                ]
            },
            "allocate": { //端口分配设置
                "strategy": "always",
                "refresh": 5,
                "concurrency": 3
            }
        }
    ],
    "outbounds": [ //一个数组，每个元素是一个出站连接配置。列表中的第一个元素作为主出站协议。当路由匹配不存在或没有匹配成功时，流量由主出站协议发出。
        {
            "sendThrough": "0.0.0.0",
            "protocol": "vmess",
            "settings": {
                "vnext": [
                    {
                      "address": "serveraddr.com", // 服务器地址，请修改为你自己的服务器 IP 或域名
                      "port": 16823,  // 服务器端口
                      "users": [
                        {
                          "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，必须与服务器端配置相同
                          "alterId": 64 // 此处的值也应当与服务器相同,这个参数主要是为了加强防探测能力。理论上 alterId 越大越好，但越大就约占内存(只针对服务器，客户端不占内存)
                        }
                      ]
                    }
                  ]
            },//具体的配置内容，视协议不同而不同。详见每个协议中的OutboundConfigurationObject。
            "tag": "标识", //此出站连接的标识，用于在其它的配置中定位此连接。当其值不为空时，必须在所有 tag 中唯一。
            "streamSettings": {},//底层传输配置
            "proxySettings": { //出站代理配置。当出站代理生效时，此出站协议的streamSettings将不起作用。
                "tag": "another-outbound-tag"
            },
            "mux": { //Mux 功能是在一条 TCP 连接上分发多个 TCP 连接的数据。Mux 只需要在客户端启用，服务器端自动适配。
                "enabled": false,
                "concurrency": 8
            }
        }
    ],
    "transport": {
        "tcpSettings": {},
        "kcpSettings": {},
        "wsSettings": {},
        "httpSettings": {},
        "dsSettings": {},
        "quicSettings": {}
    }
}